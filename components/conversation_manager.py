"""
Conversation Manager Component

Component qu·∫£n l√Ω h·ªôi tho·∫°i th√¥ng minh, ƒëi·ªÅu ph·ªëi c√°c component kh√°c.
"""

from typing import Optional
from .interfaces import (
    IConversationManager, ConversationContext, ConversationState, 
    UserInfo, TuviResult
)
from .database_manager import DatabaseManager
from .information_extractor import InformationExtractor
from .response_generator import ResponseGenerator
from .tuvi_calculator import TuviCalculator
from .llm_provider import LLMProvider


class ConversationManager(IConversationManager):
    """Qu·∫£n l√Ω h·ªôi tho·∫°i th√¥ng minh"""
    
    def __init__(self, 
                 database_manager: DatabaseManager = None,
                 information_extractor: InformationExtractor = None,
                 response_generator: ResponseGenerator = None,
                 tuvi_calculator: TuviCalculator = None,
                 llm_provider: LLMProvider = None):
        
        # Initialize components with dependency injection
        self.db_manager = database_manager or DatabaseManager()
        self.llm_provider = llm_provider or LLMProvider()
        self.info_extractor = information_extractor or InformationExtractor(self.llm_provider)
        self.response_generator = response_generator or ResponseGenerator()
        self.tuvi_calculator = tuvi_calculator or TuviCalculator()
    
    def process_message(self, message: str, user_id: str) -> str:
        """X·ª≠ l√Ω tin nh·∫Øn v√† tr·∫£ v·ªÅ ph·∫£n h·ªìi"""
        # L∆∞u tin nh·∫Øn ng∆∞·ªùi d√πng
        self.db_manager.save_chat_message(user_id, message, "user")
        
        # L·∫•y ng·ªØ c·∫£nh cu·ªôc h·ªôi tho·∫°i
        context = self.get_conversation_context(user_id)
        
        # X·ª≠ l√Ω reset request
        if self._is_reset_request(message):
            self.reset_conversation(user_id)
            response = "üîÑ **ƒê√£ kh·ªüi t·∫°o l·∫°i phi√™n t∆∞ v·∫•n!** B·∫°n c√≥ th·ªÉ b·∫Øt ƒë·∫ßu l·∫°i t·ª´ ƒë·∫ßu."
            self.db_manager.save_chat_message(user_id, response, "assistant")
            return response
        
        # Tr√≠ch xu·∫•t th√¥ng tin t·ª´ tin nh·∫Øn
        updated_user_info = self.info_extractor.extract_user_info(message, context)
        
        # C·∫≠p nh·∫≠t ng·ªØ c·∫£nh v·ªõi th√¥ng tin m·ªõi
        context.collected_info = updated_user_info
        
        # Ki·ªÉm tra xem ƒë√£ c√≥ ƒë·ªß th√¥ng tin ch∆∞a
        if self.info_extractor.is_info_complete(updated_user_info):
            # ƒê·ªß th√¥ng tin, ti·∫øn h√†nh ph√¢n t√≠ch t·ª≠ vi
            return self._perform_tuvi_analysis(user_id, updated_user_info)
        else:
            # Ch∆∞a ƒë·ªß th√¥ng tin, y√™u c·∫ßu b·ªï sung
            missing_fields = self.info_extractor.get_missing_fields(updated_user_info)
            response = self.response_generator.generate_info_request_response(missing_fields)
            
            # C·∫≠p nh·∫≠t session
            context.state = ConversationState.COLLECTING_INFO
            self.db_manager.save_user_session(user_id, context)
            self.db_manager.save_chat_message(user_id, response, "assistant")
            
            return response
    
    def get_conversation_context(self, user_id: str) -> ConversationContext:
        """L·∫•y ng·ªØ c·∫£nh cu·ªôc h·ªôi tho·∫°i"""
        context = self.db_manager.get_user_session(user_id)
        
        if not context:
            # T·∫°o context m·ªõi
            context = ConversationContext(
                user_id=user_id,
                state=ConversationState.GREETING,
                collected_info=UserInfo(),
                message_history=[]
            )
            self.db_manager.save_user_session(user_id, context)
        
        return context
    
    def reset_conversation(self, user_id: str) -> None:
        """Reset cu·ªôc h·ªôi tho·∫°i"""
        self.db_manager.reset_user_session(user_id)
    
    def _is_reset_request(self, message: str) -> bool:
        """Ki·ªÉm tra xem c√≥ ph·∫£i y√™u c·∫ßu reset kh√¥ng"""
        reset_keywords = ['reset', 'b·∫Øt ƒë·∫ßu l·∫°i', 'm·ªõi', 'kh·ªüi t·∫°o l·∫°i', 'xin ch√†o']
        message_lower = message.lower()
        return any(keyword in message_lower for keyword in reset_keywords)
    
    def _perform_tuvi_analysis(self, user_id: str, user_info: UserInfo) -> str:
        """Th·ª±c hi·ªán ph√¢n t√≠ch t·ª≠ vi"""
        try:
            # T√≠nh to√°n l√° s·ªë t·ª≠ vi
            tuvi_result = self.tuvi_calculator.calculate_tuvi(user_info)
            
            # T·∫°o ph·∫£n h·ªìi ph√¢n t√≠ch
            response = self.response_generator.generate_tuvi_analysis_response(user_info, tuvi_result)
            
            # C·∫≠p nh·∫≠t session sang tr·∫°ng th√°i consulting
            context = self.get_conversation_context(user_id)
            context.state = ConversationState.CONSULTING
            self.db_manager.save_user_session(user_id, context)
            self.db_manager.save_chat_message(user_id, response, "assistant")
            
            return response
            
        except Exception as e:
            error_response = f"‚ùå C√≥ l·ªói x·∫£y ra khi t√≠nh l√° s·ªë: {str(e)}"
            self.db_manager.save_chat_message(user_id, error_response, "assistant")
            return error_response
    
    def handle_consulting_question(self, message: str, user_id: str) -> str:
        """X·ª≠ l√Ω c√¢u h·ªèi t∆∞ v·∫•n sau khi ƒë√£ ph√¢n t√≠ch"""
        # L∆∞u c√¢u h·ªèi
        self.db_manager.save_chat_message(user_id, message, "user")
        
        # L·∫•y ng·ªØ c·∫£nh
        context = self.get_conversation_context(user_id)
        
        if not self.info_extractor.is_info_complete(context.collected_info):
            response = "T√¥i s·∫Ω tr·∫£ l·ªùi c√¢u h·ªèi c·ªßa b·∫°n sau khi ho√†n th√†nh ph√¢n t√≠ch t·ª≠ vi. Tr∆∞·ªõc ti√™n, t√¥i c·∫ßn thu th·∫≠p ƒë·ªß th√¥ng tin c∆° b·∫£n."
            self.db_manager.save_chat_message(user_id, response, "assistant")
            return response
        
        try:
            # T√≠nh l·∫°i l√° s·ªë t·ª≠ vi (c√≥ th·ªÉ cache ƒë·ªÉ t·ªëi ∆∞u)
            tuvi_result = self.tuvi_calculator.calculate_tuvi(context.collected_info)
            
            # T·∫°o ph·∫£n h·ªìi t∆∞ v·∫•n
            response = self.response_generator.generate_consulting_response(
                message, context.collected_info, tuvi_result
            )
            
            self.db_manager.save_chat_message(user_id, response, "assistant")
            return response
            
        except Exception as e:
            error_response = f"‚ùå C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω c√¢u h·ªèi: {str(e)}"
            self.db_manager.save_chat_message(user_id, error_response, "assistant")
            return error_response


class IntelligentConversationManager(ConversationManager):
    """Conversation Manager s·ª≠ d·ª•ng LLM ƒë·ªÉ ph√¢n t√≠ch th√¥ng minh"""
    
    def process_message(self, message: str, user_id: str) -> str:
        """X·ª≠ l√Ω tin nh·∫Øn v·ªõi ph√¢n t√≠ch LLM th√¥ng minh"""
        # L∆∞u tin nh·∫Øn ng∆∞·ªùi d√πng
        self.db_manager.save_chat_message(user_id, message, "user")
        
        # L·∫•y ng·ªØ c·∫£nh
        context = self.get_conversation_context(user_id)
        
        # Ph√¢n t√≠ch cu·ªôc h·ªôi tho·∫°i b·∫±ng LLM
        analysis = self.llm_provider.analyze_conversation(message, context)
        
        # X·ª≠ l√Ω theo √Ω ƒë·ªãnh ƒë∆∞·ª£c ph√¢n t√≠ch
        if analysis['user_intent'] == 'reset':
            self.reset_conversation(user_id)
            response = "üîÑ **ƒê√£ kh·ªüi t·∫°o l·∫°i phi√™n t∆∞ v·∫•n!** B·∫°n c√≥ th·ªÉ b·∫Øt ƒë·∫ßu l·∫°i t·ª´ ƒë·∫ßu."
            self.db_manager.save_chat_message(user_id, response, "assistant")
            return response
        
        elif analysis['user_intent'] == 'greeting':
            response = self.response_generator.generate_greeting_response()
            context.state = ConversationState.COLLECTING_INFO
            self.db_manager.save_user_session(user_id, context)
            self.db_manager.save_chat_message(user_id, response, "assistant")
            return response
        
        elif analysis['user_intent'] == 'asking_question':
            if context.state == ConversationState.CONSULTING:
                return self.handle_consulting_question(message, user_id)
            else:
                response = "T√¥i s·∫Ω tr·∫£ l·ªùi c√¢u h·ªèi c·ªßa b·∫°n sau khi ho√†n th√†nh ph√¢n t√≠ch t·ª≠ vi. Tr∆∞·ªõc ti√™n, t√¥i c·∫ßn thu th·∫≠p ƒë·ªß th√¥ng tin c∆° b·∫£n."
                self.db_manager.save_chat_message(user_id, response, "assistant")
                return response
        
        elif analysis['user_intent'] == 'providing_info':
            # Tr√≠ch xu·∫•t th√¥ng tin b·∫±ng LLM
            if analysis.get('should_extract_info', True):
                updated_user_info = self.llm_provider.extract_information(message, context)
                context.collected_info = updated_user_info
            
            # Ki·ªÉm tra ƒë·ªß th√¥ng tin
            if self.info_extractor.is_info_complete(context.collected_info):
                return self._perform_tuvi_analysis(user_id, context.collected_info)
            else:
                missing_fields = self.info_extractor.get_missing_fields(context.collected_info)
                response = self.response_generator.generate_info_request_response(missing_fields)
                context.state = ConversationState.COLLECTING_INFO
                self.db_manager.save_user_session(user_id, context)
                self.db_manager.save_chat_message(user_id, response, "assistant")
                return response
        
        else:
            # S·ª≠ d·ª•ng ph·∫£n h·ªìi ƒë∆∞·ª£c g·ª£i √Ω t·ª´ LLM
            if analysis.get('suggested_response'):
                response = analysis['suggested_response']
            else:
                response = "T√¥i hi·ªÉu b·∫°n mu·ªën t∆∞ v·∫•n t·ª≠ vi. H√£y chia s·∫ª th√¥ng tin c∆° b·∫£n v·ªÅ b·∫°n."
            
            self.db_manager.save_chat_message(user_id, response, "assistant")
            return response
