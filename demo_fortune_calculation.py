#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Demo script ƒë·ªÉ test c√°c t√≠nh to√°n v·∫≠n m·ªánh m·ªõi cho chatbot t·ª≠ vi
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from chat import an_sao_tuvi_comprehensive, demo_fortune_analysis

def test_fortune_calculation():
    """Test c√°c t√≠nh to√°n v·∫≠n m·ªánh v·ªõi nhi·ªÅu tr∆∞·ªùng h·ª£p kh√°c nhau"""
    
    print("=" * 60)
    print("DEMO T√çNH TO√ÅN V·∫¨N M·ªÜNH CHO CHATBOT T·ª¨ VI")
    print("=" * 60)
    
    # Test case 1: Nam, sinh 15/8/1990, gi·ªù Ng·ªç
    print("\nüî∏ TEST CASE 1: Nam, sinh 15/8/1990, gi·ªù Ng·ªç")
    print("-" * 50)
    
    result1 = an_sao_tuvi_comprehensive(
        day=15, month=8, year=1990, hour=6, gender='Nam',
        current_year=2025, current_month=1, current_day=15
    )
    
    print(f"Th√¥ng tin c∆° b·∫£n:")
    print(f"  - Sinh: {result1['basic_info']['birth_info']}")
    print(f"  - Thi√™n Can: {result1['basic_info']['thien_can']}")
    print(f"  - ƒê·ªãa Chi: {result1['basic_info']['dia_chi']}")
    print(f"  - C·ª•c: {result1['basic_info']['cuc']}")
    print(f"  - Cung M·ªánh: {result1['basic_info']['menh_cung']}")
    print(f"  - Tu·ªïi hi·ªán t·∫°i: {result1['basic_info']['current_age']}")
    
    print(f"\nV·∫≠n h·∫°n:")
    print(f"  - ƒê·∫°i v·∫≠n hi·ªán t·∫°i: {result1['analysis']['current_dai_van']}")
    print(f"  - Ti·ªÉu v·∫≠n: {result1['analysis']['tieu_van']['description']}")
    print(f"  - L∆∞u th√°ng: {result1['fortune']['luu_thang']['description']}")
    print(f"  - L∆∞u ng√†y: {result1['fortune']['luu_ngay']['description']}")
    
    print(f"\nƒêi·ªÉm 4 tr·ª• ch√≠nh:")
    for pillar, score in result1['analysis']['four_pillars'].items():
        pillar_name = {
            'cong_viec': 'C√¥ng vi·ªác',
            'tai_chinh': 'T√†i ch√≠nh', 
            'tinh_cam': 'T√¨nh c·∫£m',
            'suc_khoe': 'S·ª©c kh·ªèe'
        }[pillar]
        print(f"  - {pillar_name}: {score}")
    
    print(f"\nKim ch·ªâ nam: {result1['guidance']['kim_chi_nam']}")
    print(f"ƒêi·ªÉm t·ªïng qu√°t: {result1['guidance']['overall_score']}")
    
    print(f"\nKhuy·∫øn ngh·ªã chi ti·∫øt:")
    for rec in result1['guidance']['recommendations']:
        print(f"\nüìå {rec['category']} ({rec['level']} - {rec['score']}):")
        print(f"   {rec['advice']}")
        print(f"   H√†nh ƒë·ªông: {', '.join(rec['actions'])}")
    
    # Test case 2: N·ªØ, sinh 20/3/1995, gi·ªù T√Ω
    print("\n\nüî∏ TEST CASE 2: N·ªØ, sinh 20/3/1995, gi·ªù T√Ω")
    print("-" * 50)
    
    result2 = an_sao_tuvi_comprehensive(
        day=20, month=3, year=1995, hour=0, gender='N·ªØ',
        current_year=2025, current_month=1, current_day=15
    )
    
    print(f"Th√¥ng tin c∆° b·∫£n:")
    print(f"  - Sinh: {result2['basic_info']['birth_info']}")
    print(f"  - Thi√™n Can: {result2['basic_info']['thien_can']}")
    print(f"  - ƒê·ªãa Chi: {result2['basic_info']['dia_chi']}")
    print(f"  - C·ª•c: {result2['basic_info']['cuc']}")
    print(f"  - Cung M·ªánh: {result2['basic_info']['menh_cung']}")
    print(f"  - Tu·ªïi hi·ªán t·∫°i: {result2['basic_info']['current_age']}")
    
    print(f"\nƒêi·ªÉm 4 tr·ª• ch√≠nh:")
    for pillar, score in result2['analysis']['four_pillars'].items():
        pillar_name = {
            'cong_viec': 'C√¥ng vi·ªác',
            'tai_chinh': 'T√†i ch√≠nh', 
            'tinh_cam': 'T√¨nh c·∫£m',
            'suc_khoe': 'S·ª©c kh·ªèe'
        }[pillar]
        print(f"  - {pillar_name}: {score}")
    
    print(f"\nKim ch·ªâ nam: {result2['guidance']['kim_chi_nam']}")
    print(f"ƒêi·ªÉm t·ªïng qu√°t: {result2['guidance']['overall_score']}")
    
    # Test case 3: So s√°nh ƒëi·ªÉm s·ªë c√°c cung
    print("\n\nüî∏ TEST CASE 3: So s√°nh ƒëi·ªÉm s·ªë c√°c cung (Case 1)")
    print("-" * 50)
    
    print("ƒêi·ªÉm s·ªë chi ti·∫øt c√°c cung:")
    for cung_name, score_info in result1['cung_scores'].items():
        print(f"\n{cung_name}:")
        print(f"  - ƒêi·ªÉm c∆° b·∫£n: {score_info['base_score']:.1f}")
        print(f"  - Combo bonus: {score_info['combo_bonus']:.1f}")
        print(f"  - ƒêi·ªÉm cu·ªëi: {score_info['final_score']:.1f}")
        print(f"  - ƒêi·ªÉm chu·∫©n h√≥a: {score_info['normalized_score']}")
        print(f"  - Sao: {', '.join([s['sao'] for s in score_info['star_details']])}")
    
    print("\n" + "=" * 60)
    print("K·∫æT LU·∫¨N: C√°c t√≠nh to√°n v·∫≠n m·ªánh ƒë√£ ƒë∆∞·ª£c b·ªï sung th√†nh c√¥ng!")
    print("Chatbot gi·ªù ƒë√¢y c√≥ th·ªÉ:")
    print("‚úÖ T√≠nh ƒê·∫°i v·∫≠n (10 nƒÉm/cung) v·ªõi chi·ªÅu thu·∫≠n/ngh·ªãch")
    print("‚úÖ T√≠nh Ti·ªÉu v·∫≠n (l∆∞u ni√™n) v·ªõi sao l∆∞u")
    print("‚úÖ T√≠nh L∆∞u th√°ng v√† L∆∞u ng√†y")
    print("‚úÖ Scoring c√°c cung d·ª±a tr√™n sao v√† v·ªã tr√≠ mi·∫øu/v∆∞·ª£ng")
    print("‚úÖ T√≠nh combo c√°t/s√°t tinh")
    print("‚úÖ ƒê∆∞a ra khuy·∫øn ngh·ªã 4 tr·ª• ch√≠nh")
    print("‚úÖ T·∫°o kim ch·ªâ nam t·ªïng qu√°t")
    print("=" * 60)

if __name__ == "__main__":
    test_fortune_calculation()
